//
//  SchoolSearchWorker.swift
//  NYC Youths
//
//  Created by Kartikeya Kaushal on 3/15/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import Combine

protocol SchoolSearchWorkerDelegate {
    func handleSchoolData(_ data: [SchoolData])
    
    func handleError(_ error: Error)
}

protocol SchoolSearchWorkerDefinition {
    var apiClient: APIClient {get set}
    
    func getData()
}

class SchoolSearchWorker: SchoolSearchWorkerDefinition
{
    var apiClient: APIClient
    var delegate: SchoolSearchWorkerDelegate?
    
    private var cancellable: AnyCancellable?
    
    // Will always evalutate to not nil before pushing out
    private let schoolURL: URL = URL(string: "https://data.cityofnewyork.us/resource/s3k6-pzi2.json")!
    
    // Will always evalutate to not nil before pushing out
    private let satScoresURL: URL = URL(string: "https://data.cityofnewyork.us/resource/f9bf-2cp4.json")!
    
    
    init(client: APIClient = APIClient(), delegate: SchoolSearchWorkerDelegate) {
        self.apiClient = client
        self.delegate = delegate
    }
    
    func getData() {
        var finalSchoolsData: [SchoolData] = []
        cancellable = Publishers.Zip(getSchoolData(), getSATScoreData()).sink(receiveCompletion: { completion in
            switch(completion) {
            case .failure(let error):
                self.delegate?.handleError(error)
            case .finished:
                //Done.  We just get the value from here
                break
            }
        }, receiveValue: { (schools, scores) in
            finalSchoolsData = schools.map({ school in
                let matchingScoresIndex = scores.firstIndex { score in
                    (school.dbn == score.dbn) && (school.schoolName == score.schoolName)
                }
                let newData = SchoolData(school: school, satScores: scores[matchingScoresIndex ?? 0])
                return newData
            })
            self.delegate?.handleSchoolData(finalSchoolsData)
        })
        
    }
    
    private func getSchoolData() -> Future<[School], Error> {
        let request = URLRequest(url: schoolURL)
        
        return apiClient.run(request)
    }
    
    private func getSATScoreData() -> Future<[SATScores], Error> {
        let request = URLRequest(url: satScoresURL)
        
        return apiClient.run(request)
    }
    
}//end SchoolSearchWorker
